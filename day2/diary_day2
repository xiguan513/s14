http://www.cnblogs.com/alex3714/category/770733.html

模块(库)
   标准模块(库)；os sys 等
   第三方模块(库) django 等
不能使用和标准模块一样的名字
import sys: 导入sys模块
sys.path 查看python全局环境变量，标准模块和第三方模块存放或者调用的路径，并且按照顺序调用



pyc是一种二进制文件:
    是由py文件经过编译后，生成的文件，是一种byte code，py文件变成pyc文件后，加载的速度有所提高，而且pyc是一种跨平台的字节码，是由python的虚拟机来执行的，这个是类似于JAVA或者.NET的虚拟机的概念。pyc的内容，是跟python的版本相关的，不同版本编译后的pyc文件是不同的，2.5编译的pyc文件，2.4版本的 python是无法执行的。

什么是pyo文件

    pyo是优化编译后的程序 python -O 源文件即可将源程序编译为pyo文件

什么是pyd文件

    pyd是python的动态链接库。


python 数据类型
    数字
        整数
            1 2 3 例子
        长整数

        浮点数
            3.23和52.3E-4是浮点数的例子。E标记表示10的幂。在这里，52.3E-4表示52.3 * 10-4。
        复数
            (-5+4j)和(2.3-4.6j)是复数的例子，其中-5,4为实数，j为虚数，数学中表示复数是什么？。

    int（整型）

    　　在32位机器上，整数的位数为32位，取值范围为-2**31～2**31-1，即-2147483648～2147483647
    　　在64位系统上，整数的位数为64位，取值范围为-2**63～2**63-1，即-9223372036854775808～9223372036854775807
    long（长整型）
    　　跟C语言不同，Python的长整数没有指定位宽，即：Python没有限制长整数数值的大小，但实际上由于机器内存有限，我们使用的长整数数值不可能无限大。
    　　注意，自从Python2.2起，如果整数发生溢出，Python会自动将整数数据转换为长整数，所以如今在长整数数据后面不加字母L也不会导致严重后果了。
    float（浮点型）
        先扫盲 http://www.cnblogs.com/alex3714/articles/5895848.html
　　      浮点数用来处理实数，即带有小数的数字。类似于C语言中的double类型，占8个字节（64位），其中52位表示底，11位表示指数，剩下的一位表示符号。
    complex（复数）
　　     复数由实数部分和虚数部分组成，一般形式为x＋yj，其中的x是复数的实数部分，y是复数的虚数部分，这里的x和y都是实数。
注：Python中存在小数字池：-5 ～ 257

    布尔值
    　　真或假
    　　1 或 0
    字符串
    "hello world"
    万恶的字符串拼接：
    　　python中的字符串在C语言中体现为是一个字符数组，每次创建字符串时候需要在内存中开辟一块连续的空，并且一旦需要修改字符串的话，就需要再次开辟空间，万恶的+号每出现一次就会在内从中重新开辟一块空间。
    字符串格式化输出

PS: 字符串是 %s;整数 %d;浮点数%f

字符串常用功能：
移除空白
分割
长度
索引
切片
更多详细的字符串操作查看python修订.docx

    列表
        创建列表：

            name_list = ['alex', 'seven', 'eric']
            或
            name_list ＝ list(['alex', 'seven', 'eric'])
            基本操作：

        列表基本功能
        索引
            取出对应元素的索引(下标)
            >>> name_list.index("alex")
            0
        元素
            根据元素(下标)取出对应元素
            >>> name_list[0]
            'alex'
        切片
            根据下标位置取内容
            >>> name_list[1:2]
            ['seven']
        追加
            >>> name_list.append("song")
            >>> name_list
            ['alex', 'seven', 'eric', 'song']
        删除
            remove移除指定元素，不返回移除内容
            >>> name_list.remove("song")
            >>> name_list
            ['alex', 'seven', 'eric']
            pop默认移除最后一个，并返回移除内容
            >>> name_list.pop()
            'eric'
            >>> name_list
            ['alex', 'seven']
        长度
            >>> len(name_list)
            2
        插入
            需要指定插入的位置，通过指定下标来确定
            >>> name_list.insert(2,"test")
            >>> name_list
            ['alex', 'seven', 'test']
        统计
            统计元素出现的次数
            >>> name_list.count("test")
            1
        修改
            >>> name_list[0]="songbing"
            >>> name_list
            ['songbing', 'seven', 'test']
    元组(不可变列表)
        创建元组：

        ages = (11, 22, 33, 44, 55)
        或
        ages = tuple((11, 22, 33, 44, 55))

    字典（无序）
        创建字典：

        info = {"name": "song", 'age': 18}
        或
        info = dict({"name": "song", 'age': 18})
    字典常用操作：

        key
            获取所有key
            >>> info.keys()
            dict_keys(['age', 'name'])
        value 获取所有值
            >> info.values()
            dict_values([26, 'song'])
        key,value
            获取所有key和value
            >>> info.items()
            dict_items([('age', 26), ('name', 'song')])
        新增
            >>> info["job"]="IT"
            >>> info
            {'job': 'IT', 'age': 26, 'name': 'song'}
        删除
            删除字典key，不返回删除内容
            >>> del info["age"]
            >>> info
            {'job': 'IT', 'name': 'song'}
            删除字典key,并返回删除的值
            >>> info.pop("job")
            'IT'
            >>> info
            {'name': 'song'}
        判断
            >>> info
            {'name': 'song'}
            >>> "name" in info
            True
            >>> "test" in info
            False
        获取
            get方式，如果没有不报错
            >>> info.get("name")
            'song'
            >>> info.get("test")
            直接调用，如果没有报错
            >>> info["test"]
            Traceback (most recent call last):
              File "<pyshell#14>", line 1, in <module>
                info["test"]
            KeyError: 'test'
            >>> info["name"]
            'song'
        修改
            >>> info["name"]="li"
            >>> info
            {'age': 26, 'name': 'li'}

        循环
            标准方法
            >>> for i in info:
	            print(i,info[i],end=" ")
	        数据量大，不要使用
	        >>> for k,v in info.items():
	            print(k,v)


    集合(set)是一个无序的，不重复的数据组合
        去重，把一个列表变成集合，就自动去重了
        关系测试，测试两组数据之前的交集、差集、并集等关系
        a=set(["a","b",1,2,1])


    三元运算

        result = 值1 if 条件 else 值2
        如果条件为真：result = 值1
        如果条件为假：result = 值2

python3中
严格区分字符串和二进制的区别
encode('utf-8') 字符串转换为字节包
decode('utf-8') 字节包转换为字符串


列表切片

    name_list=["song","bing","test","ceshi"]

        0    1      2       3
    ["song","bing","test","ceshi"]
      -4      -3      -2       -1
    切片顾首不顾尾
    取name_list列表下标1到3之间的内容，包含1，不包含3
    >>> name_list[1:3]
    ['bing', 'test']
    >>> name_list[-1:-2]
    []
    >>> name_list[2:-1]
    ['test']
    >>> name_list[:3]
    ['song', 'bing', 'test']
    >>> name_list[-1:]
    ['ceshi']
    >>> name_list[-3:]
    ['bing', 'test', 'ceshi']
    >>> name_list[2:-3]
    []
    >>>
    步长切片
    >>> a=range(10)
    >>> a
    range(0, 10)
    >>> a=list(a)
    >>> a
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    >>> a[::2]
    [0, 2, 4, 6, 8]
    >>> a[0:9:3]
    [0, 3, 6]

python 浅copy 和 深copy 的区别

    >>> list1=["song","bing",[1,2,3]]
    >>> list1
    ['song', 'bing', [1, 2, 3]]
    >>> list2=list1.copy()
    >>> list2
    ['song', 'bing', [1, 2, 3]]
    >>> list1[0]="test"
    >>> list1
    ['test', 'bing', [1, 2, 3]]
    >>> list2
    ['song', 'bing', [1, 2, 3]]
    >>> list1[2][0]="songbing"
    >>> list1
    ['test', 'bing', ['songbing', 2, 3]]
    >>> list2
    ['song', 'bing', ['songbing', 2, 3]]
    >>>


    >>> list4=list1[:]
    >>> list4
    ['test', 'bing', ['songbing', 2, 3]]
    >>> list1
    ['test', 'bing', ['songbing', 2, 3]]
    >>> list1[2][2]="test"
    >>> list1
    ['test', 'bing', ['songbing', 2, 'test']]
    >>> list4
    ['test', 'bing', ['songbing', 2, 'test']]
    >>> list1[1]="ceshi"
    >>> list1
    ['test', 'ceshi', ['songbing', 2, 'test']]
    >>> list4
    ['test', 'bing', ['songbing', 2, 'test']]


    >>> list2=copy.copy(list1)
    >>> list1
    ['test', 'ceshi', ['songbing', 2, 'test']]
    >>> list2
    ['test', 'ceshi', ['songbing', 2, 'test']]
    >>> list1[2][1]="li"
    >>> list1
    ['test', 'ceshi', ['songbing', 'li', 'test']]
    >>> list2
    ['test', 'ceshi', ['songbing', 'li', 'test']]
    >>> list1[1]="apan"
    >>> list1
    ['test', 'apan', ['songbing', 'li', 'test']]
    >>> list2
    ['test', 'ceshi', ['songbing', 'li', 'test']]

    查看两个列表的内存地址
    >>> id(list1)
    56757984
    >>> id(list2)
    56735584
    查看列表中列表的内存地址
    >>> id(list1[2][0])
    59553296
    >>> id(list2[2][0])
    59553296
    查看列表中每个元素的内存地址
    >>> id(list1[0])
    26868768
    >>> id(list2[0])
    59492672
    >>>

    完全相同的内存地址
    list1=list2


作业
    购物车
        用户入口
        1. 商品信息存在文件里面
        2. 已购商品，余额记录

        商品入口
        可以添加商品，修改商品价格