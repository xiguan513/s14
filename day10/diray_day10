http://www.cnblogs.com/alex3714/articles/5248247.html


python多线程
    不适合CPU密集操作型的任务，
    合适IO密集型的任务

python进程
    可以根据CPU核数起相对应的进程，每个进程至少有一个线程，所以可以同时执行8个线程任务，但是
    python中没有单核CPU没有多线程之说，每颗CPU同一时间只能运行一个线程，只是使用快速的上下文切换，实现并行

每个进程默认都会有一个父进程




进程间数据传递
    Queue 进程队列
    from multiprocessing import Queue


    pipe 管道
    from multiprocessing import Pipe

进程间数据共享
    from multiprocessing import Manager
    可以在多个进程间传递字典，列表，等数据
    with Manager() as manager:
        manager.dict()#创建进程间共享字典的方法
        manager.list(range(5))


进程同步（进程锁）针对多进程打印，多进程输出，单屏幕(多进程屏幕共享)的时候会用到
    from multiprocessing import Lock


进程池
    进程池两个方法：
        apply 同步串行
        apply_async 异步并行


协程
    协程是一种用户态的轻量级线程
    协程拥有自己的寄存器上下文和栈
    协程调度切换时，将寄存器上下文和栈保存到其他地方，在切换回来的时候，回复先前保存的寄存器上下文和栈
    因此协程能保留一次调用时的状态，每次过程重载时，相当于进入上一次调用的状态，就是进入上一次离开时所处逻辑流的位置


    greenlet手动创建协程，并手动切换


    gevent协程自动切换遇到io操作就切换

事件驱动与异步IO

    通常，我们写服务器处理模型的程序时，有以下几种模型：
    （1）每收到一个请求，创建一个新的进程，来处理该请求；
    （2）每收到一个请求，创建一个新的线程，来处理该请求；
    （3）每收到一个请求，放入一个事件列表，让主进程通过非阻塞I/O方式来处理请求
    上面的几种方式，各有千秋，
    第（1）中方法，由于创建新的进程的开销比较大，所以，会导致服务器性能比较差,但实现比较简单。
    第（2）种方式，由于要涉及到线程的同步，有可能会面临死锁等问题。
    第（3）种方式，在写应用程序代码时，逻辑比前面两种都复杂。
    综合考虑各方面因素，一般普遍认为第（3）种方式是大多数网络服务器采用的方式




