装饰器：
    定义：本质函数，功能装饰其他函数（为其他函数添加附加功能）
    原则: 1.不能修改被装饰的函数的源代码
          2.不能修改被装饰函数的调用方式
          （装饰器对被装饰函数完全透明）

    实现装饰器知识储备：
    1. 函数即变量
    2. 高阶函数
        a:把一个函数体作为实参传给另个函数
        b:返回值中包涵函数体
    3. 嵌套函数

http://www.cnblogs.com/alex3714/articles/5765046.html
迭代器&生成器

    生成器函数：编写为常规的def语句，但是使用yiled语句一次返回一个结果，在每个结果之间挂起和继续它们的状态。
    yiled语句挂起该函数并向调用者发送回一个值，但是，保留足够的状态以使得函数能够从它离开的地方继续执行，当
    继续执行时，函数在上一个yiled返回后立即执行。

    生成器:只有在调用时才会生产相应的数据
           只记录当前位置，只有一个__next__()方法，2.7里面next()

           >>> g=(i+1 for i in range(0,10))
            >>> g
            <generator object <genexpr> at 0x03DE7B70>
            >>> type(g)
            <class 'generator'>
            >>> g.__next__()
            1
            >>> g.__next__()
            2
            >>> g.__next__()
            3

         def fib(max):
            n,a,b=0,0,1
            while n < max:
                #print(b)
                yield b#中断程序直接返回值，并保存函数当前运行状态，提供函数返回点
                a,b=b,a+b
                n+=1
            return 'done'

        b=fib(10)

        # print(b.__next__())#print(next(b))
        # print(b.__next__())#print(next(b))
        # print(b.__next__())#print(next(b))


        #next: 只调用yield，不给yield传值，并恢复生成器
        #send: 调用yield的同时给yield传值，并恢复生成器

     迭代器：
        可以直接作用于for循环的对象统称为可迭代对象：Iterable
            可循环对象：list tuple dict set str generator(生成器和带yield的generator function)
        可使用isinstance()判断一个对象是否是Iterable对象或者是否是可迭代器

        可以被next() or __next__()函数调用并不断返回下一个值的对象成为迭代器：Iterator
        注意可迭代对象和迭代器的区别
        iter()方法把可迭代对象变为迭代器

序列化json&pickle


作业
    信用卡功能
    还款，转账，提现（5%利息）




